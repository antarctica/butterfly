% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timeline.R
\name{timeline}
\alias{timeline}
\title{timeline: check if a timeseries is continuous}
\usage{
timeline(df_current, datetime_variable, expected_lag = 1)
}
\arguments{
\item{df_current}{data.frame, the newest/current version of dataset x.}

\item{datetime_variable}{string, the "datetime" variable that should be
checked for continuity.}

\item{expected_lag}{numeric, the acceptable difference between timestep for
a timeseries to be classed as continuous. Any difference greater than
\code{expected_lag} will indicate a timeseries is not continuous. Default is 1.
The smallest units of measurement present in the column will be used. For
example in a column formatted YYYY-MM, month will be used. In a column
formatted YYYY-MM-DD day will be used.}
}
\value{
A boolean, TRUE if the timeseries is continuous, and FALSE if there
are more than one continuous timeseries within the dataset.
}
\description{
Check if a timeseries is continuous. Even if a timeseries does not contain
obvious gaps, this does not automatically mean it is also continuous.
}
\details{
Measuring instruments can have different behaviours when they fail. For
example, during power failure an internal clock could reset to "1970-01-01",
or the manufacturing date (say, "2021-01-01"). This leads to unpredictable
ways of checking if a dataset is continuous.

The \code{group_timelines()} and \code{timeline()} functions attempt to give the user
control over how to check for continuity by providing an \code{expected_lag}. The
difference between timesteps in a dataset should not exceed the
\code{expected_lag}.
}
\examples{
# This example contains no differences with previous data
# Our datetime column is formatted YYYY-MM-DD, and we expect an observation
# every month, therefore our expected lag is 31 (days).
butterfly::timeline(
  butterflycount$april,
  datetime_variable = "time",
  expected_lag = 31
)

}
\seealso{
\code{\link[=group_timelines]{group_timelines()}}
}
