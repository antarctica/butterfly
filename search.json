[{"path":"https://thomaszwagerman.github.io/butterfly/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 butterfly authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"butterfly","text":"can install development version butterfly GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"thomaszwagerman/butterfly\")"},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"butterfly","text":"butterfly package contains following: butterfly::loupe() - examines detail whether previous values changed, reports using waldo::compare(). butterfly::catch() - returns rows contain previously changed values dataframe. butterfly::release() - drops rows contain previously changed values, returns dataframe containing new unchanged rows. butterflycount - list monthly dataframes, contain fictional butterfly counts given date.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"how-to-use-butterfly","dir":"Articles","previous_headings":"","what":"How to use butterfly","title":"butterfly","text":"basic example shows use butterfly: can use butterfly::loupe() examine detail whether previous values changed. butterfly::loupe() uses dplyr::semi_join() match new old objects using common unique identifier, timeseries timestep. waldo::compare() used compare provide detailed report differences. butterfly follows waldo philosophy erring side providing much information, rather little. give detailed feedback message status two objects.","code":"library(butterfly)  # Imagine a continually updated dataset that starts in January and is updated once a month butterflycount$january #>         time count #> 1 2024-01-01    22 #> 2 2023-12-01    55 #> 3 2023-11-01    11  # In February an additional row appears, all previous data remains the same butterflycount$february #>         time count #> 1 2024-02-01    17 #> 2 2024-01-01    22 #> 3 2023-12-01    55 #> 4 2023-11-01    11  # In March an additional row appears again # ...but a previous value has unexpectedly changed butterflycount$march #>         time count #> 1 2024-03-01    23 #> 2 2024-02-01    17 #> 3 2024-01-01    22 #> 4 2023-12-01    55 #> 5 2023-11-01    18 butterfly::loupe(   butterflycount$february,   butterflycount$january,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$february':  #>         time count #> 1 2024-02-01    17 #> ✔ And there are no differences with previous data.  butterfly::loupe(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ But the following values have changes from the previous data: #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11"},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"using-butterfly-for-data-wrangling","dir":"Articles","previous_headings":"How to use butterfly","what":"Using butterfly for data wrangling","title":"butterfly","text":"might want return changed rows dataframe, drop altogether. butterfly::catch() butterfly::release() provided. , butterfly::catch() returns rows changed previous version. return new rows. Conversely, butterfly::release() drops rows changed previous version. Note retains new rows, expected.","code":"df_caught <- butterfly::catch(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ The following rows have changed from the previous data, and will be returned: #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11  df_caught #>         time count #> 1 2023-11-01    18 df_released <- butterfly::release(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ The following rows have changed from the previous data, and will be dropped:  #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11  df_released #>         time count #> 1 2024-03-01    23 #> 2 2024-02-01    17 #> 3 2024-01-01    22 #> 4 2023-12-01    55"},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"the-butterflycount-dataset","dir":"Articles","previous_headings":"","what":"The butterflycount dataset","title":"butterfly","text":"packages includes small dummy dataset, butterflycount, contains list monthly dataframes butterfly counts given date. dataset entirely fictional, merely included aid demonstrating butterfly’s functionality.","code":"butterflycount #> $january #>         time count #> 1 2024-01-01    22 #> 2 2023-12-01    55 #> 3 2023-11-01    11 #>  #> $february #>         time count #> 1 2024-02-01    17 #> 2 2024-01-01    22 #> 3 2023-12-01    55 #> 4 2023-11-01    11 #>  #> $march #>         time count #> 1 2024-03-01    23 #> 2 2024-02-01    17 #> 3 2024-01-01    22 #> 4 2023-12-01    55 #> 5 2023-11-01    18 #>  #> $april #>         time value species #> 1 2024-04-01    12 Admiral #> 2 2024-03-01    23 Admiral #> 3 2024-02-01    NA Admiral #> 4 2024-01-01    22 Admiral #> 5 2023-12-01    55 Admiral #> 6 2023-11-01    18 Admiral"},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"incorporating-in-data-pipeline","dir":"Articles","previous_headings":"","what":"Incorporating in data pipeline","title":"butterfly","text":"Examples using applying butterfly pipeline.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/articles/butterfly.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"butterfly","text":"lot data comparison QA/QC packages , butterfly? package originally developed deal ERA5’s initial release data, ERA5T. ERA5T data month overwritten final ERA5 data two months month question. Usually ERA5 ERA5T identical, occasionally issue input data can (example 09/21 - 12/21, 07/24) force recalculation, meaning previously published data differs final product. publishing ERA5-derived datasets, minting DOI, possible continuously append without invalidating DOI. However, recalculation overwrite previously published data, thereby forcing new publication DOI minted. use functionality package automated data processing pipeline detect changes, stop data transfer notify user. package intentionally generalised accommodate , similar, use cases. examples include correction instrument calibration, compromised data transfer unnoticed changes parameterisation model.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Zwagerman. Author, maintainer.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zwagerman T (2024). butterfly: QA/QC Continually Updating Timeseries Data. R package version 0.0.0.9000, https://github.com/thomaszwagerman/butterfly.","code":"@Manual{,   title = {butterfly: QA/QC For Continually Updating Timeseries Data},   author = {Thomas Zwagerman},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/thomaszwagerman/butterfly}, }"},{"path":"https://thomaszwagerman.github.io/butterfly/index.html","id":"butterfly","dir":"","previous_headings":"","what":"QA/QC For Continually Updating Timeseries Data","title":"QA/QC For Continually Updating Timeseries Data","text":"goal butterfly aid quality assurance continually updating overwritten time-series data, expect new values time, want ensure previous data remains unchanged.  Data previously recorded change number reasons, discovery error model code, change methodology instrument recalibration. Monitoring data sources changes always possible. Unnoticed changes previous data unintended consequences, invalidating DOIs, altering future predictions used input forecasting models. package provides functionality can used part data pipeline, check flag changes previous data prevent changes going unnoticed.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"QA/QC For Continually Updating Timeseries Data","text":"can install development version butterfly GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"thomaszwagerman/butterfly\")"},{"path":"https://thomaszwagerman.github.io/butterfly/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"QA/QC For Continually Updating Timeseries Data","text":"butterfly package contains following: butterfly::loupe() - examines detail whether previous values changed, reports using waldo::compare(). butterfly::catch() - returns rows contain previously changed values dataframe. butterfly::release() - drops rows contain previously changed values, returns dataframe containing new unchanged rows. butterflycount - list monthly dataframes, contain fictional butterfly counts given date.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"QA/QC For Continually Updating Timeseries Data","text":"basic example shows use butterfly: can use butterfly::loupe() examine detail whether previous values changed. butterfly::loupe() uses dplyr::semi_join() match new old objects using common unique identifier, timeseries timestep. waldo::compare() used compare provide detailed report differences. butterfly follows waldo philosophy erring side providing much information, rather little. give detailed feedback message status two objects.","code":"library(butterfly)  # Imagine a continually updated dataset that starts in January and is updated once a month butterflycount$january #>         time count #> 1 2024-01-01    22 #> 2 2023-12-01    55 #> 3 2023-11-01    11  # In February an additional row appears, all previous data remains the same butterflycount$february #>         time count #> 1 2024-02-01    17 #> 2 2024-01-01    22 #> 3 2023-12-01    55 #> 4 2023-11-01    11  # In March an additional row appears again # ...but a previous value has unexpectedly changed butterflycount$march #>         time count #> 1 2024-03-01    23 #> 2 2024-02-01    17 #> 3 2024-01-01    22 #> 4 2023-12-01    55 #> 5 2023-11-01    18 butterfly::loupe(   butterflycount$february,   butterflycount$january,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$february':  #>         time count #> 1 2024-02-01    17 #> ✔ And there are no differences with previous data.  butterfly::loupe(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ But the following values have changes from the previous data: #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11"},{"path":"https://thomaszwagerman.github.io/butterfly/index.html","id":"using-butterfly-for-data-wrangling","dir":"","previous_headings":"Examples","what":"Using butterfly for data wrangling","title":"QA/QC For Continually Updating Timeseries Data","text":"might want return changed rows dataframe, drop altogether. butterfly::catch() butterfly::release() provided. , butterfly::catch() returns rows changed previous version. return new rows. Conversely, butterfly::release() drops rows changed previous version. Note retains new rows, expected.","code":"df_caught <- butterfly::catch(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ The following rows have changed from the previous data, and will be returned: #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11  df_caught #>         time count #> 1 2023-11-01    18 df_released <- butterfly::release(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ The following rows have changed from the previous data, and will be dropped:  #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11  df_released #>         time count #> 1 2024-03-01    23 #> 2 2024-02-01    17 #> 3 2024-01-01    22 #> 4 2023-12-01    55"},{"path":"https://thomaszwagerman.github.io/butterfly/index.html","id":"relevant-packages-and-functions","dir":"","previous_headings":"","what":"Relevant packages and functions","title":"QA/QC For Continually Updating Timeseries Data","text":"butterfly package created specific use case handling continuously updating/overwritten time-series data, previous values may change without notice. R packages functions handle object comparison, may suit specific needs better: waldo diffdf assertr daquiri functions include .equal() dplyr’s setdiff()","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/butterfly-package.html","id":null,"dir":"Reference","previous_headings":"","what":"butterfly: QA/QC For Continually Updating Timeseries Data — butterfly-package","title":"butterfly: QA/QC For Continually Updating Timeseries Data — butterfly-package","text":"QA/QC continually updating timeseries data expect new values, want ensure previous data remains unchanged.","code":""},{"path":[]},{"path":"https://thomaszwagerman.github.io/butterfly/reference/butterfly-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"butterfly: QA/QC For Continually Updating Timeseries Data — butterfly-package","text":"Maintainer: Thomas Zwagerman thozwa@bas.ac.uk (ORCID)","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/butterflycount.html","id":null,"dir":"Reference","previous_headings":"","what":"Butterfly count dummy data — butterflycount","title":"Butterfly count dummy data — butterflycount","text":"completely fictional dataset monthly butterfly counts","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/butterflycount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Butterfly count dummy data — butterflycount","text":"","code":"butterflycount"},{"path":[]},{"path":"https://thomaszwagerman.github.io/butterfly/reference/butterflycount.html","id":"butterflycount","dir":"Reference","previous_headings":"","what":"butterflycount","title":"Butterfly count dummy data — butterflycount","text":"list 4 dataframes (january, february, march, april) containing 3 columns, 3 + n_month rows: time date imaginary count took place, yyyy-mm-dd format count Number fictional butterflies counted species Butterfly species name, appears april","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/catch.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch: return dataframe containing only rows that have changed — catch","title":"Catch: return dataframe containing only rows that have changed — catch","text":"function matches two dataframe objects unique identifier (usually \"time\" \"datetime timeseries), returns new dataframe contains rows changed compared previous data. return new rows.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/catch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch: return dataframe containing only rows that have changed — catch","text":"","code":"catch(df_current, df_previous, datetime_variable)"},{"path":"https://thomaszwagerman.github.io/butterfly/reference/catch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch: return dataframe containing only rows that have changed — catch","text":"df_current data.frame, newest/current version dataset x. df_previous data.frame, old version dataset, example x - t1. datetime_variable character, variable use unique ID join df_current df_previous. Usually \"datetime\" variable.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/catch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catch: return dataframe containing only rows that have changed — catch","text":"dataframe contains rows df_current changes df_previous, without new rows. also returns waldo object loupe().","code":""},{"path":[]},{"path":"https://thomaszwagerman.github.io/butterfly/reference/catch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catch: return dataframe containing only rows that have changed — catch","text":"","code":"df_caught <- butterfly::catch(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ The following rows have changed from the previous data, and will be returned: #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11  df_caught #>         time count #> 1 2023-11-01    18"},{"path":"https://thomaszwagerman.github.io/butterfly/reference/loupe.html","id":null,"dir":"Reference","previous_headings":"","what":"Loupe: compare new and old data in continuously updated timeseries — loupe","title":"Loupe: compare new and old data in continuously updated timeseries — loupe","text":"loupe simple, small magnification device used examine small details closely.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/loupe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loupe: compare new and old data in continuously updated timeseries — loupe","text":"","code":"loupe(df_current, df_previous, datetime_variable)"},{"path":"https://thomaszwagerman.github.io/butterfly/reference/loupe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loupe: compare new and old data in continuously updated timeseries — loupe","text":"df_current data.frame, newest/current version dataset x. df_previous data.frame, old version dataset, example x - t1. datetime_variable string, variable use unique ID join df_current df_previous. Usually \"datetime\" variable.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/loupe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loupe: compare new and old data in continuously updated timeseries — loupe","text":"waldo object containing message differences 'differences previous data'.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/loupe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loupe: compare new and old data in continuously updated timeseries — loupe","text":"function intended aid quality assurance continually updating timeseries data expect new values want ensure previous values remains unchanged. function matches two dataframe objects unique identifier (usually \"time\" \"datetime timeseries). informs user new (unmatched) rows appeared, returns waldo::compare() call give detailed breakdown changes. main assumption df_current df_previous newer older versions data, datetime_variable variable name always remains . Elsewhere new columns can appear, returned report.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/loupe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loupe: compare new and old data in continuously updated timeseries — loupe","text":"","code":"# This example contains no differences with previous data butterfly::loupe(  butterflycount$february,  butterflycount$january,  datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$february':  #>         time count #> 1 2024-02-01    17 #> ✔ And there are no differences with previous data.  # This example does contain differences with previous data butterfly::loupe(   butterflycount$march,   butterflycount$february,   datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ But the following values have changes from the previous data: #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11"},{"path":"https://thomaszwagerman.github.io/butterfly/reference/release.html","id":null,"dir":"Reference","previous_headings":"","what":"Release: return current dataframe without changed old rows — release","title":"Release: return current dataframe without changed old rows — release","text":"function matches two dataframe objects unique identifier (usually \"time\" \"datetime timeseries), returns new dataframe contains new rows (present) matched rows contain changes previous data dropped.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Release: return current dataframe without changed old rows — release","text":"","code":"release(df_current, df_previous, datetime_variable)"},{"path":"https://thomaszwagerman.github.io/butterfly/reference/release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Release: return current dataframe without changed old rows — release","text":"df_current data.frame, newest/current version dataset x. df_previous data.frame, old version dataset, example x - t1. datetime_variable string, variable use unique ID join df_current df_previous. Usually \"datetime\" variable.","code":""},{"path":"https://thomaszwagerman.github.io/butterfly/reference/release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Release: return current dataframe without changed old rows — release","text":"dataframe contains rows df_current changed df_previous, includes new rows. also returns waldo object loupe().","code":""},{"path":[]},{"path":"https://thomaszwagerman.github.io/butterfly/reference/release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Release: return current dataframe without changed old rows — release","text":"","code":"df_released <- butterfly::release( butterflycount$march, butterflycount$february, datetime_variable = \"time\" ) #> The following rows are new in 'butterflycount$march':  #>         time count #> 1 2024-03-01    23 #>  #> ℹ The following rows have changed from the previous data, and will be dropped:  #> old vs new #>            count #>   old[1, ]    17 #>   old[2, ]    22 #>   old[3, ]    55 #> - old[4, ]    18 #> + new[4, ]    11 #>  #> `old$count`: 17 22 55 18 #> `new$count`: 17 22 55 11  df_released #>         time count #> 1 2024-03-01    23 #> 2 2024-02-01    17 #> 3 2024-01-01    22 #> 4 2023-12-01    55"}]
